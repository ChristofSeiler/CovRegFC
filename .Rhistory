axis.title.x=element_blank(),
axis.title.y=element_blank()) +
coord_fixed() +
ggtitle("Correlations")
# standard deviations
sigma = rstan::extract(fit_vb,pars = "L_sigma")[[1]]
sigma_median = apply(X = sigma,MARGIN = c(2),FUN = median)
df_std = data.frame(channel = colnames(Y),sigma = sigma_median)
ggobj_std = ggplot(df_std,aes(channel,sigma)) +
geom_bar(colour="black", stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
ggtitle("Standard Deviations")
#theme_set(theme_cowplot(font_size=12))
plot_grid(ggobj_corr, ggobj_std, labels = NULL, align = 'h', scale = c(1,0.8))
plot_unexplained_cov
plot_unexplained_cov
library(CovRegFC)
plot_unexplained_cov
CovRegFC::covreg()
library(CovRegFC)
library(CovRegFC)
library(CovRegFC)
library(CovRegFC)
plot_unexplained_cov(fit_vb)
fit_vb@model_pars
fit_vb@par_dims
fit_vb@model_pars
fit_vb@model_name
fit_vb@stan_args
fit_vb@stan_args
fit_vb@inits
fit_vb@stanmodel
fit_vb@mode
Omega = rstan::extract(fit,pars = "Omega")[[1]]
dim(Omega)
dim(Omega[1,,])
Omega[1,,]
plot_unexplained_cov(fit_vb)
responses
plot_unexplained_cov(fit_vb,response)
plot_grid(ggobj_corr, ggobj_std, labels = NULL, align = 'h', scale = c(1,0.8),base_aspect_ratio = 1)
plot_grid(ggobj_corr, ggobj_std, labels = NULL, align = 'h', scale = c(1,0.8),base_aspect_ratio = 1)
plot_grid(ggobj_corr, ggobj_std, labels = NULL, align = 'h', scale = c(1,0.8))
source('~/CovRegFC/R/plot_unexplained_cov.R', echo=TRUE)
# correalations
Omega = rstan::extract(fit,pars = "Omega")[[1]]
Omega_median = apply(X = Omega,MARGIN = c(2,3),FUN = median)
rownames(Omega_median) = colnames(Omega_median) = response
get_upper_tri = function(cormat) {
cormat[lower.tri(cormat)] = NA
cormat
}
Omega_long = melt(get_upper_tri(Omega_median), na.rm = TRUE)
ggobj_corr = ggplot(data = Omega_long, aes(Var2, Var1, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, space = "Lab",
limit = c(-1,1),
name = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
#coord_fixed() +
ggtitle("Correlations")
# standard deviations
sigma = rstan::extract(fit,pars = "L_sigma")[[1]]
sigma_median = apply(X = sigma,MARGIN = c(2),FUN = median)
df_std = data.frame(channel = response,sigma = sigma_median)
ggobj_std = ggplot(df_std,aes(channel,sigma)) +
geom_bar(colour="black", stat="identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x=element_blank(),
axis.title.y=element_blank()) +
ggtitle("Standard Deviations")
# combine
plot_grid(ggobj_corr, ggobj_std, labels = NULL, align = 'h', scale = c(1,0.8))
library(CovRegFC)
plot_unexplained_cov(fit_vb,response)
library(CovRegFC)
plot_unexplained_cov(fit_vb,response)
source('~/CovRegFC/R/plot_unexplained_cov.R', echo=TRUE)
plot_unexplained_cov(fit_vb,response)
channel_type = "highWL"
var_ids = NULL
if(str_detect(channel_type,"oxy")) {
var_ids = str_detect(names(data_prepared),paste0("_",channel_type)) %>% which
} else if(str_detect(channel_type,"WL")) {
frontal = c('AF7Fp1','AF3Fp1','AF3AFz','FpzFp1','FpzAFz','FpzFp2','AF4AFz','AF4Fp2','AF8Fp2')
motor_left = c('C5CP5','C5FC5','C5C3','FC3FC5','FC3C3','FC3FC1','CP3CP5','CP3C3','CP3CP1','C1C3','C1FC1','C1CP1')
motor_right = c('C2FC2','C2CP2','C2C4','FC4FC2','FC4C4','FC4FC6','CP4CP6','CP4CP2','CP4C4','C6CP6','C6C4','C6FC6')
occipital = c('OzPOz','OzO1','OzO2')
region_list = list(frontal,motor_left,motor_right,occipital)
channel_names_reorderd = paste0(unlist(region_list),channel_type)
var_ids = sapply(channel_names_reorderd,function(name) {
names(data_prepared) %in% name %>% which
})
}
# motor task
#data = subset(data_prepared,task == "LMI" | task == "RMI") %>% droplevels
# mental arithmetic task
data = subset(data_prepared,task == "BL" | task == "MA") %>% droplevels
response = names(data)[var_ids]
response
# load stan model from file
file = find_package_root_file("R", "covreg.stan")
model = stan_model(file = file,
model_name = "covreg_model")
# build design matrix
data_subset = data[data$participant %in% 1:10,] %>%
subset(.,session == 2) %>%
droplevels
Y = data_subset[,response] %>% as.matrix
colnames(Y)
X = model.matrix(as.formula(paste("~",condition)), data = data_subset)
colnames(X) = levels(data_subset[,condition])
attr(X, "assign") = NULL
stan_data = list(K = ncol(Y),
J = ncol(X),
N = nrow(X),
x = X,
y = Y)
dim(X)
head(X)
dim(Y)
str(Y)
head(Y)
# initializing with pooled empirical covariance matrix
sample_cor = cor(Y)
L_Omega = t(chol(sample_cor))
L_sigma = sqrt(diag(cov(Y)))
init_data = list(L_Omega = L_Omega,
L_sigma = L_sigma)
sample_cor
image(sample_cor)
seed = 1
fit_vb = vb(model,
data = stan_data,
init = init_data,
seed = seed) #,
path = find_package_root_file("vignettes", "mnt.mat")
path
mnt = readMat(path)
library(R.matlab)
mnt = readMat(path)
mnt
channel_location = data.frame(names = mnt$mnt[,,1]$clab %>% unlist,
x = mnt$mnt[,,1]$x,
y = mnt$mnt[,,1]$y)
channel_location
channel_location$names = as.character(channel_location$names)
channel_location
channel_location = data.frame(names = mnt$mnt[,,1]$clab %>% unlist %>% as.character,
x = mnt$mnt[,,1]$x,
y = mnt$mnt[,,1]$y)
channel_location
channel_location$names
channel_location = data.frame(names = mnt$mnt[,,1]$clab %>% unlist,
x = mnt$mnt[,,1]$x,
y = mnt$mnt[,,1]$y)
channel_location$names = as.character(channel_location$names)
channel_location$names
channel_location
channel_location$x
range(channel_location$x)
range(channel_location$y)
range(c(channel_location$x,channel_location$y))
range(c(channel_location$x,channel_location$y)) %>% abs
range(c(channel_location$x,channel_location$y)) %>% abs %>% max
range(c(channel_location$x,channel_location$y)) %>% abs %>% max
response
response
response
plot_channels(channel_location)
library(CovRegFC)
plot_channels(channel_location)
circle = function(center = c(0, 0), npoints = 100) {
r = range(c(channel_location$x,channel_location$y)) %>% abs %>% max * 1.1
tt = seq(0, 2*pi, length = npoints)
xx = center[1] + r*cos(tt)
yy = center[1] + r*sin(tt)
return(data.frame(x = xx, y = yy))
}
corcir = circle(c(0, 0), npoints = 100)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
xlab("left <--> right") +
ylab("posterior <--> anterior")
circle = function(center = c(0, 0), npoints = 100) {
r = range(c(channel_location$x,channel_location$y)) %>% abs %>% max * 1.1
tt = seq(0, 2*pi, length = npoints)
xx = center[1] + r*cos(tt)
yy = center[1] + r*sin(tt)
return(data.frame(x = xx, y = yy))
}
corcir = circle(c(0, 0), npoints = 100)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
panel.border=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
xlab("left <--> right") +
ylab("posterior <--> anterior")
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
xlab("left <--> right") +
ylab("posterior <--> anterior")
library(CovRegFC)
plot_channels(channel_location,x_label = "left <--> right",y_label = "posterior <--> anterior")
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
xlab(x_label) +
ylab(y_label) +
coord_fixed(ratio = 1.5)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
#xlab(x_label) +
#ylab(y_label) +
coord_fixed(ratio = 1.5)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
#xlab(x_label) +
#ylab(y_label) +
coord_fixed(ratio = 1.1)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
#xlab(x_label) +
#ylab(y_label) +
coord_fixed(ratio = 1.05)
library(CovRegFC)
ggplot(channel_location) +
geom_path(data = corcir, aes(x = x, y = y), colour = "gray65") +
geom_text(aes(x = x, y = y, label = names)) +
theme(#axis.title = element_blank(),
axis.line=element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
xlab(x_label) +
ylab(y_label) +
coord_fixed()
library(CovRegFC)
plot_unexplained_cov(fit_vb,response)
response
plot_channels(channel_location,x_label = "left <--> right",y_label = "posterior <--> anterior")
plot_channels(channel_location,
x_label = "left <--> right",
y_label = "posterior <--> anterior")
channel_type = "oxy"
var_ids = NULL
if(str_detect(channel_type,"oxy")) {
var_ids = str_detect(names(data_prepared),paste0("_",channel_type)) %>% which
} else if(str_detect(channel_type,"WL")) {
frontal = c('AF7Fp1','AF3Fp1','AF3AFz','FpzFp1','FpzAFz','FpzFp2','AF4AFz','AF4Fp2','AF8Fp2')
motor_left = c('C5CP5','C5FC5','C5C3','FC3FC5','FC3C3','FC3FC1','CP3CP5','CP3C3','CP3CP1','C1C3','C1FC1','C1CP1')
motor_right = c('C2FC2','C2CP2','C2C4','FC4FC2','FC4C4','FC4FC6','CP4CP6','CP4CP2','CP4C4','C6CP6','C6C4','C6FC6')
occipital = c('OzPOz','OzO1','OzO2')
region_list = list(frontal,motor_left,motor_right,occipital)
channel_names_reorderd = paste0(unlist(region_list),channel_type)
var_ids = sapply(channel_names_reorderd,function(name) {
names(data_prepared) %in% name %>% which
})
}
# load stan model from file
file = find_package_root_file("R", "covreg.stan")
model = stan_model(file = file,
model_name = "covreg_model")
# build design matrix
data_subset = data[data$participant %in% 1:10,] %>%
subset(.,session == 2) %>%
droplevels
Y = data_subset[,response] %>% as.matrix
colnames(Y)
X = model.matrix(as.formula(paste("~",condition)), data = data_subset)
colnames(X) = levels(data_subset[,condition])
attr(X, "assign") = NULL
stan_data = list(K = ncol(Y),
J = ncol(X),
N = nrow(X),
x = X,
y = Y)
# initializing with pooled empirical covariance matrix
sample_cor = cor(Y)
L_Omega = t(chol(sample_cor))
L_sigma = sqrt(diag(cov(Y)))
init_data = list(L_Omega = L_Omega,
L_sigma = L_sigma)
#for(i in 1:num_chains)
#  init_data_all[[i]] = init_data
# run Stan with variational inference
seed = 1
fit_vb = vb(model,
data = stan_data,
init = init_data,
seed = seed) #,
response
channel_type = "oxy"
var_ids = NULL
if(str_detect(channel_type,"oxy")) {
var_ids = str_detect(names(data_prepared),paste0("_",channel_type)) %>% which
} else if(str_detect(channel_type,"WL")) {
frontal = c('AF7Fp1','AF3Fp1','AF3AFz','FpzFp1','FpzAFz','FpzFp2','AF4AFz','AF4Fp2','AF8Fp2')
motor_left = c('C5CP5','C5FC5','C5C3','FC3FC5','FC3C3','FC3FC1','CP3CP5','CP3C3','CP3CP1','C1C3','C1FC1','C1CP1')
motor_right = c('C2FC2','C2CP2','C2C4','FC4FC2','FC4C4','FC4FC6','CP4CP6','CP4CP2','CP4C4','C6CP6','C6C4','C6FC6')
occipital = c('OzPOz','OzO1','OzO2')
region_list = list(frontal,motor_left,motor_right,occipital)
channel_names_reorderd = paste0(unlist(region_list),channel_type)
var_ids = sapply(channel_names_reorderd,function(name) {
names(data_prepared) %in% name %>% which
})
}
var_ids
path = find_package_root_file("vignettes", "mnt.mat")
mnt = readMat(path)
channel_location = data.frame(names = mnt$mnt[,,1]$clab %>% unlist,
x = mnt$mnt[,,1]$x,
y = mnt$mnt[,,1]$y)
channel_location$names = as.character(channel_location$names)
plot_channels(channel_location,
x_label = "left <--> right",
y_label = "posterior <--> anterior")
# motor task
#data = subset(data_prepared,task == "LMI" | task == "RMI") %>% droplevels
# mental arithmetic task
data = subset(data_prepared,task == "BL" | task == "MA") %>% droplevels
response = names(data)[var_ids]
response
dim(response)
response
# load stan model from file
file = find_package_root_file("R", "covreg.stan")
model = stan_model(file = file,
model_name = "covreg_model")
# build design matrix
data_subset = data[data$participant %in% 1:10,] %>%
subset(.,session == 2) %>%
droplevels
Y = data_subset[,response] %>% as.matrix
colnames(Y)
X = model.matrix(as.formula(paste("~",condition)), data = data_subset)
colnames(X) = levels(data_subset[,condition])
attr(X, "assign") = NULL
stan_data = list(K = ncol(Y),
J = ncol(X),
N = nrow(X),
x = X,
y = Y)
# initializing with pooled empirical covariance matrix
sample_cor = cor(Y)
L_Omega = t(chol(sample_cor))
L_sigma = sqrt(diag(cov(Y)))
init_data = list(L_Omega = L_Omega,
L_sigma = L_sigma)
#for(i in 1:num_chains)
#  init_data_all[[i]] = init_data
# run Stan with variational inference
seed = 1
fit_vb = vb(model,
data = stan_data,
init = init_data,
seed = seed) #,
response
plot_unexplained_cov(fit_vb,response)
colnames(X)
X = model.matrix(as.formula(paste("~",condition)), data = data_subset)
names(Let me know if that works.)
names(X)
head(X)
beta = rstan::extract(fit,pars = "beta")[[1]]
beta = rstan::extract(fit_vb,pars = "beta")[[1]]
beta
dim(beta)
col_number = 2
beta_2_quantiles = apply(B2[,,col_number],1,function(vec)
quantile(vec,probs = c(0.025/nrow(B2),
0.5,
1-0.025/nrow(B2))))
nrow(beta)
beta_2_quantiles = apply(B2[,,col_number],1,function(vec)
quantile(vec,probs = c(0.025/nrow(beta),
0.5,
1-0.025/nrow(beta))))
beta_2_quantiles = apply(beta[,,col_number],1,function(vec)
quantile(vec,probs = c(0.025/nrow(beta),
0.5,
1-0.025/nrow(beta))))
beta_2_quantiles
dim(beta[,,col_number])
dim(beta[,,col_number])
beta_2_quantiles = apply(beta[,,col_number],MARGIN = 2,function(vec)
quantile(vec,probs = c(0.025/nrow(beta),
0.5,
1-0.025/nrow(beta))))
beta_2_quantiles
beta_2_perc = apply(beta[,,col_number],MARGIN = 2,function(vec)
quantile(vec,probs = c(0.025/nrow(beta),
0.5,
1-0.025/nrow(beta))))
beta_2_perc
df = data.frame(x = factor(response, levels = response),
y_low = beta_2_perc[1,],
y_mid = beta_2_perc[2,],
y_high = beta_2_perc[3,])
df
dim(beta_2_perc)
t(beta_2_perc)
df = data.frame(t(beta_2_perc))
df
names(df) = c("low","mid","high")
df
df = data.frame(x = factor(response, levels = response),
t(beta_2_perc))
names(df) = c("low","mid","high")
df = data.frame(x = factor(response, levels = response),
t(beta_2_perc))
names(df) = c("x","low","mid","high")
df
ggplot(df) +
geom_segment(mapping=aes(x=x, y=low, xend=x, yend=high)) +
geom_point(mapping=aes(x=x, y=mid)) +
xlab("channel") +
#ylab(col_name) +
geom_hline(yintercept=0,col = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# + ylim(y_limits)
condition
levels(data[,condition])
levels(data[,condition])
levels(data[,condition])
condition_names = levels(data[,condition])
condition_names
paste(condition_names,collapse = "<-->")
paste(condition_names,collapse = " <--> ")
# extract second column encoding difference between tasks
beta = rstan::extract(fit_vb,pars = "beta")[[1]]
col_number = 2
beta_2_perc = apply(beta[,,col_number],MARGIN = 2,function(vec)
quantile(vec,probs = c(0.025/nrow(beta),
0.5,
1-0.025/nrow(beta))))
df = data.frame(x = factor(response, levels = response),
t(beta_2_perc))
names(df) = c("x","low","mid","high")
ggplot(df) +
geom_segment(mapping=aes(x=x, y=low, xend=x, yend=high)) +
geom_point(mapping=aes(x=x, y=mid)) +
xlab("channel") +
ylab(paste(condition_names,collapse = " <--> ")) +
geom_hline(yintercept=0,col = "red") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
"Contrast:",paste(condition_names,collapse = " ")
paste0("Contrast:",paste(condition_names,collapse = " "))
paste0("Contrast: ",paste(condition_names,collapse = " "))
paste0("Contrast: ",paste(condition_names,collapse = " vs. "))
rev(condition_names)
paste0("Contrast: ",paste(rev(condition_names),collapse = " vs. "))
contrast(data[,condition])
contrasts(data[,condition])
dim( contrasts(data[,condition]) )
contrasts(data[,condition])
rownames(contrasts(data[,condition]))
contrasts(data[,condition])
response
condition
condition
response
plot_explained_cov(fit_vb,data,response,condition)
library(CovRegFC)
plot_explained_cov(fit_vb,data,response,condition)
contrasts(data[,condition])
condition_names = contrasts(data[,condition]) %>% rownames %>% rev
condition_names
condition_names = data[,condition] %>% contrasts %>% rownames %>% rev
condition_names
library(CovRegFC)
plot_explained_cov(fit_vb,data,response,condition)
condition
library(CovRegFC)
